name: Security and Code Quality Scan

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    # Allow manual triggering

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  security-scan:
    name: Security Analysis
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      # Node.js Security Scanning
      - name: Setup Node.js
        uses: actions/setup-node@v5
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        working-directory: frontend
        run: npm ci

      - name: Run npm audit
        working-directory: frontend
        run: |
          echo "## NPM Security Audit Results" >> $GITHUB_STEP_SUMMARY
          npm audit --audit-level moderate || echo "npm audit found vulnerabilities"
          npm audit --json > npm-audit-results.json || true

      - name: Upload npm audit results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: npm-audit-results
          path: frontend/npm-audit-results.json

      # CodeQL Analysis for JavaScript/TypeScript
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: javascript
          queries: security-extended

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

      # Semgrep Static Analysis
      - name: Run Semgrep
        uses: semgrep/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/secrets
            p/javascript
            p/nodejs
            p/docker
        continue-on-error: true

      # Secret Detection
      - name: Run TruffleHog OSS
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          extra_args: --only-verified --no-verification
        continue-on-error: true

      # Dockerfile Security Scanning
      - name: Run Hadolint (Dockerfile linter)
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: Dockerfile
          format: sarif
          output-file: hadolint-results.sarif
        continue-on-error: true

      - name: Upload Hadolint results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: hadolint-results.sarif

      # Docker Image Security Scanning
      - name: Build Docker image for scanning
        run: docker build -t dogecoin-node-scan:latest .
        continue-on-error: true

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'dogecoin-node-scan:latest'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'
        continue-on-error: true

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      # License Compliance Check
      - name: License compliance check
        working-directory: frontend
        run: |
          npx license-checker --json --out license-report.json || true
          echo "## License Compliance Report" >> $GITHUB_STEP_SUMMARY
          echo "License report generated and saved as artifact" >> $GITHUB_STEP_SUMMARY

      - name: Upload license report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: license-report
          path: frontend/license-report.json

  code-quality:
    name: Code Quality Analysis
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v5
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        working-directory: frontend
        run: npm ci

      # ESLint for JavaScript code quality
      - name: Run ESLint
        working-directory: frontend
        run: |
          npx eslint . --ext .js --format @microsoft/eslint-formatter-sarif --output-file eslint-results.sarif || true
          echo "## ESLint Results" >> $GITHUB_STEP_SUMMARY
          echo "ESLint analysis completed" >> $GITHUB_STEP_SUMMARY

      - name: Upload ESLint results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: frontend/eslint-results.sarif

      # SonarCloud Analysis (skipped - requires setup)
      - name: SonarCloud Scan Info
        run: |
          echo "## SonarCloud Analysis" >> $GITHUB_STEP_SUMMARY
          echo "SonarCloud scanning is available but requires SONAR_TOKEN configuration" >> $GITHUB_STEP_SUMMARY
          echo "To enable: Set SONAR_TOKEN secret and uncomment SonarCloud step" >> $GITHUB_STEP_SUMMARY

      # Code complexity and maintainability
      - name: Install complexity analysis tools
        run: |
          npm install -g jscpd complexity-report

      - name: Run code duplication check
        working-directory: frontend
        run: |
          jscpd . --reporters json --output ./jscpd-report.json || true
          echo "## Code Duplication Analysis" >> $GITHUB_STEP_SUMMARY
          echo "Code duplication check completed" >> $GITHUB_STEP_SUMMARY

      - name: Upload code duplication report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: jscpd-report
          path: frontend/jscpd-report.json

  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [security-scan, code-quality]
    if: always()
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Generate Security Summary
        run: |
          echo "# üîí Security Scan Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Scans Completed:" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ NPM Security Audit" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ CodeQL Static Analysis" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Semgrep Security Rules" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ TruffleHog Secret Detection" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Hadolint Dockerfile Analysis" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Trivy Container Security Scan" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ ESLint Code Quality" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ License Compliance Check" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Code Duplication Analysis" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## üìä Results:" >> $GITHUB_STEP_SUMMARY
          echo "All security scans have been completed. Check the Security tab for detailed findings." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## üì• Artifacts:" >> $GITHUB_STEP_SUMMARY
          echo "- NPM audit results" >> $GITHUB_STEP_SUMMARY
          echo "- License compliance report" >> $GITHUB_STEP_SUMMARY
          echo "- Code duplication analysis" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## üîç Next Steps:" >> $GITHUB_STEP_SUMMARY
          echo "1. Review any high/critical severity findings in the Security tab" >> $GITHUB_STEP_SUMMARY
          echo "2. Address dependency vulnerabilities found by npm audit" >> $GITHUB_STEP_SUMMARY
          echo "3. Review and fix any code quality issues identified by ESLint" >> $GITHUB_STEP_SUMMARY
          echo "4. Ensure no secrets were detected in the codebase" >> $GITHUB_STEP_SUMMARY

      - name: Security scan status
        run: |
          echo "## üìã Security Scan Summary" >> $GITHUB_STEP_SUMMARY
          if [ "${{ needs.security-scan.result }}" == "success" ] && [ "${{ needs.code-quality.result }}" == "success" ]; then
            echo "‚úÖ All security and quality scans completed successfully" >> $GITHUB_STEP_SUMMARY
            echo "‚úÖ All security and quality scans completed successfully"
          else
            echo "‚ÑπÔ∏è Security scans completed with some issues - review findings above" >> $GITHUB_STEP_SUMMARY
            echo "‚ÑπÔ∏è Security scans completed with some issues - review findings above"
          fi
          echo "Workflow completed - check Security tab and artifacts for detailed results"
